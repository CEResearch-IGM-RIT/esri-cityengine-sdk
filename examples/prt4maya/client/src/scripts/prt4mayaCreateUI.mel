global proc string[] createPrtNode() {
	$filters = "Rule Package (*.rpk);;All Files (*.*)";
	string $rulePackage[] = `fileDialog2 -fm 1 -cap "Select Rule Package" -ff $filters`;
	string $result[];
	
	if(size($rulePackage)) {
		string $select[] = `ls -sl`;
		
		for ( $node in $select ) {
			string $prtName = "<ignored>";
			if(`nodeType $node` == "prt") {
				setAttr -type "string" ($node + ".Rule_Package") $rulePackage[0];
				$prtName = $node;
			} else {
				if(`nodeType $node` == "transform") {
					string $children[] = `listRelatives -children $node`;
					for($child in $children) {
						if(`nodeType $child` == "mesh") {
							$node = $child;
							break;
						}
					}
				}

				if(`nodeType $node` == "mesh") {
					string $dsts[] = `connectionInfo -dfs ($node + ".outMesh")`;
					if(size($dsts)) {
						for($dst in $dsts) {
							string $dstNode = `match "[^.]*" $dst`;
							if(`nodeType $dstNode` == "prt") {
								setAttr -type "string" ($dstNode + ".Rule_Package") $rulePackage[0];
							}
						}
					} else {
						$prtName = `createNode prt`;
						$prtName = `rename $prtName "prt#"`;
						setAttr -type "string" ($prtName + ".Rule_Package") $rulePackage[0];
						string $parent[]  = `listRelatives -parent $node`;
						string $meshName;
						if(size($parent)) {
							$meshName = `createNode -parent $parent[0] mesh`;
						} else {
							$meshName = `createNode -parent $node mesh`;
						}
						$meshName = `rename $meshName "prtShape#"`;
						connectAttr ( ( $prtName + ".outMesh" ), ( $meshName + ".inMesh" ) );
						connectAttr ( ( $node + ".outMesh" ), ( $prtName + ".inMesh" ) );
						sets -addElement initialShadingGroup $meshName;
					}
				}
			}
			$result[size($result)] = $node;
			$result[size($result)] = $prtName;
		}
	}
	    
    return $result;
}

global proc createPrtMenu() {
	global string $gMainWindow;
	
	global string $gPrtMenu = "prtMenu"; 

	setParent $gMainWindow;
	
	if (`isTrue "BaseMayaExists"`) { 
		menu -l "PRT" -aob true -to true
		-postMenuCommandOnce true
		$gPrtMenu; 
		setParent -m ..; 
		
		setParent -m $gPrtMenu;
		
		menuItem -divider true;
		
		menuItem -label "Attach Rule..."  -c "createPrtNode"  
		
		-annotation "Attach a CGA rule package to a geometry";
				
		setParent -m ..;
	}
}

global proc prt4mayaCreateUI() {
	//if ( !`pluginInfo -query -loaded prt4maya.mll` ) {
    //	loadPlugin "prt4maya.mll";
    //}    
    
    print "prt4mayaCreateUI here we go...";
    
 	createPrtMenu();
}

// --- shader setup helpers
	
global proc string fileNameFromPath(string $filePath) {
	string $buffer[];
	int $nTok = `tokenize $filePath "/" $buffer`;
	return $buffer[$nTok-1];
}
	
global proc string createShadingGroup(string $texFilePath) {
	if(size($texFilePath) == 0) {
		return "initialShadingGroup";
	}

	string $fileName = fileNameFromPath($texFilePath); 			// might not be unique!
	$fileName        = substituteAllString($fileName, ".", "_");		// '.' seems to be illegal	
	string $sgName   = "prtShadingGroup_" + $fileName;
	
	// if group with that name exists already: use it
	string $allSets[] = `ls -sets`;
	string $se;
	for($se in $allSets) {
		if($se == $sgName) return $sgName;
	}
		
	string $shName = "prtShader_" + $fileName;		
	string $fnName = "prtFile_" + $fileName;		

	shadingNode -asShader lambert -n $shName;
	sets -renderable true -noSurfaceShader true -empty -name $sgName;
	connectAttr -f ($shName + ".outColor") ($sgName + ".surfaceShader");

	shadingNode -asTexture file -n $fnName;
	connectAttr -force ($fnName + ".outColor") ($shName + ".color");

	setAttr ($fnName + ".fileTextureName") -type "string" $texFilePath;

	return $sgName;
}
	